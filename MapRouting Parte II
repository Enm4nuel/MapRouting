import os
import xml.etree.ElementTree as xee
import math
import matplotlib.pyplot as plt
import sys
import networkx as nx
import matplotlib.pyplot as plt


def osmProcess():
    
    # Leer el archivo
    domTree = xee.parse("map (3).osm")

    # Obtener todos los nodos de contenido
    root = domTree.getroot()

    #   revisar nodo
    nodes = root.findall("node")
    ways = root.findall("way")

    for node in nodes:
        for tag in node:

            if "name" in tag.get("k"):
                k = tag.get("k")
                v = tag.get("v")
                lista.append([ node.get("id"), float(node.get("lat")), float(node.get("lon")), v])

    for way in ways:
        for nd in way:
            listaWay.append([way.get("id"), [nd.get("ref")]])
                
 
def rad (x):
    return x*math.pi/180

def Calculod (lat1, lat2, long1, long2):
    

    dLat = rad(lat2 - lat1)
    dLong = rad(long2 - long1)
    radio = 6378.137

    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(rad(lat1)) * math.cos(rad(lat2)) * math.sin(dLong/2) * math.sin(dLong/2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

    d = radio * c
    

    return round(d, 3)

def cercano(lat1, lat2, lon1, lon2):

    l = 0
    c = 0
    
    if len(lat1) == 10 and len(lat2) == 10:
        for i in range (10):
            if str(lat1[i]) == str(lat2[i]):
                l+=1
    else:
        return False

    if l >= 6:
        return True
    else:
        return False
 
class Node:
        
    def __init__(self, name, parent, g, h, f):                                          # Initializing the class
        self.name = name
        self.parent = parent
        self.g = g                                                                      # Distance to start node
        self.h = h                                                                      # Distance to goal node
        self.f = f                                                                      # Total cost
            
    def __eq__(self, other):                                                            # Comparing two nodes
        return self.name == other.name
    
    def __lt__(self, other):                                                            # Sorting nodes
        return self.f < other.f
    
    def __repr__(self):                                                                 # Printing nodes
        return ('({0},{1})'.format(self.name, self.f))
    
    def printNode(self):                                                                # Customized Printing of nodes
        print(self.name, end = " - ")
        print(self.parent, end = " : ")
        print(self.g, end = " : ")
        print(self.h, end=" : ")
        print(self.f)


class Graph:
    
    def __init__(self, graph_dict=None, directed=True):                                 # Initialize the class
        self.graph_dict = graph_dict or {}
        self.directed = directed
        if not directed:
            self.make_undirected()
                
    def make_undirected(self):                                                          # Create an undirected graph by adding symmetric edges
        for a in list(self.graph_dict.keys()):
            for (b, dist) in self.graph_dict[a].items():
                self.graph_dict.setdefault(b, {})[a] = dist
                    
    def connect(self, A, B, distance=1):                                                # Add a link from A and B of given distance, and also add the inverse link if the graph is undirected
        self.graph_dict.setdefault(A, {})[B] = distance
        if not self.directed:
            self.graph_dict.setdefault(B, {})[A] = distance
               
    def get(self, a, b=None):                                                           # Get neighbors or a neighbor
        links = self.graph_dict.setdefault(a, {})
        if b is None:
            return links
        else:
            return links.get(b)
            
    def nodes(self):                                                                    # Return a list of nodes in the graph
        s1 = set([k for k in self.graph_dict.keys()])
        s2 = set([k2 for v in self.graph_dict.values() for k2, v2 in v.items()])
        nodes = s1.union(s2)
        return list(nodes)

    def getNode(self, city, heuristics, end):                                           # Get a specific neighbour which has minimum cost
        nodes = list()
        min = 999
        for (b,dist) in self.graph_dict[city].items():
            if(b == end):
                return Node(city, b, dist, heuristics[b], dist+heuristics[b] )
            nodes.append(Node(city, b, dist, heuristics[b], dist+heuristics[b] ))
            if (dist+heuristics[b]) < min:
                min = dist+heuristics[b]
                minnode = Node(city, b, dist, heuristics[b], dist+heuristics[b] )   
    
        return minnode
        
    def printgraph(self):                                                               # Function to print each edge in the entire graph
         for a in list(self.graph_dict.keys()):
            for (b, dist) in self.graph_dict[a].items():
                print (self.graph_dict.setdefault(a,{})[b], end = " : ")
                print(a, end = " - ")
                print(b)


def crearGrafo():

    G=nx.Graph()

    #Se crean los nodos:

    #Nodo Venezuela

    G.add_node("Santo Domingo")

    #Se crean los nodos de los estados

    for i in lista:
        G.add_nodes_from([i[3]])

    #Se crean los nodos de las ciudades.


    #Se crean los enlaces de los estados al paÃ­s

   # G.add_edge("PIANTINI","DN")



    #Se dibuja el grafo

    nx.draw(G,with_labels = True)

    #Se muestra en pantalla

    plt.show()

    #Se vuelve a dibujar el grafo y se salva en un archivo png.

    nx.draw(G)

def A_Star(graph, heuristics, start, end):
    open_list = list()
    closed_list = list()  
    path = list()                                                                       # Will store the path we are taking
    curr_node = graph.getNode(start,heuristics, end)                                    # Starting node
    open_list.append(curr_node)
    totalcost = 0

    if(end not in graph.graph_dict):                                                    # Incase the goal state does not exist
        print("\n\n---------------------------\nGOAL STATE DOES NOT EXIST\n---------------------------\n\n")
        return  None

    while(curr_node.name != end):                                                       # Runs Until we cannot find the goal state or
        totalcost += curr_node.g
        path.append(curr_node.name)
        curr_node = open_list.pop()
        closed_list.append(curr_node)
        curr_node = graph.getNode(curr_node.parent,heuristics, end)
        open_list.append(curr_node)
        if(curr_node.name == end):
            path.append(curr_node.name)
            break

    print("FINAL COST -> " + str(totalcost))
    return path
    
###########################################################################################################################

########################################################## Main ###########################################################

def main():

    osmProcess()
    
    for i in lista:
        for j in lista:
            if i[0] != j[0]:
                if cercano( str(i[1]), str(j[1]), str(i[2]), str(j[2]) ) == True:
                    distancia = Calculod( i[1], j[1], i[2], j[2] )
                    lista2.append([ i[0], j[0], distancia ])


    graph = Graph()
        
    # Create graph connections (Actual distance)
    for i in range(len(lista2)):
        graph.connect(lista2[i][0], lista2[i][1], lista2[i][2])
        
    # Make graph undirected, create symmetric connections
    graph.make_undirected()
        
    # Create heuristics (straight-line distance, air-travel distance) for Destination Bucharest
    heuristics = {}
    for i in lista:
        heuristics[i[0]] = 0.500
        
    # Print Graph Nodes
    #graph.printgraph()
    print("--------------------------------\n\n")
    # Run search algorithm
    path = A_Star(graph, heuristics, lista2[0][0], lista2[3][1])        
    print("PATH: " ,end = " ")
    print(path)

        
lista = []
lista2 = []
main()
